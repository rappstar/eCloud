digraph "classes" {
rankdir=BT
charset="utf-8"
"eCloud.ecloud.core.application.edge.astar_test_groupcaps_transform.AStarPlanner" [color="black", fontcolor="black", label=<{AStarPlanner|cars_on_road : NoneType<br ALIGN="LEFT"/>max_v : int<br ALIGN="LEFT"/>max_y : int<br ALIGN="LEFT"/>min_v : int<br ALIGN="LEFT"/>min_y : int<br ALIGN="LEFT"/>motion_v : list<br ALIGN="LEFT"/>motion_y : list<br ALIGN="LEFT"/>obstacle_map : NoneType<br ALIGN="LEFT"/>resolution<br ALIGN="LEFT"/>rr : int<br ALIGN="LEFT"/>slicenum : int<br ALIGN="LEFT"/>v : ndarray<br ALIGN="LEFT"/>v_width : int<br ALIGN="LEFT"/>vt : ndarray<br ALIGN="LEFT"/>x_start : ndarray<br ALIGN="LEFT"/>y : ndarray<br ALIGN="LEFT"/>y_width : int<br ALIGN="LEFT"/>|calc_final_path(goal_node, closed_set)<br ALIGN="LEFT"/>calc_grid_index(node)<br ALIGN="LEFT"/>calc_grid_position(index, min_position)<br ALIGN="LEFT"/>calc_heuristic(n1, n2)<br ALIGN="LEFT"/>calc_obstacle_map(ov, oy)<br ALIGN="LEFT"/>calc_xy_index(position, min_pos)<br ALIGN="LEFT"/>get_motion_model(numcars)<br ALIGN="LEFT"/>planning()<br ALIGN="LEFT"/>verify_node(node, current)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.core.common.vehicle_manager_proxy.ActorProxy" [color="black", fontcolor="black", label=<{ActorProxy|id : UUID<br ALIGN="LEFT"/>transform<br ALIGN="LEFT"/>velocity<br ALIGN="LEFT"/>|get_location()<br ALIGN="LEFT"/>get_transform()<br ALIGN="LEFT"/>get_velocity()<br ALIGN="LEFT"/>is_proxy()<br ALIGN="LEFT"/>set_location(location)<br ALIGN="LEFT"/>set_transform(transform)<br ALIGN="LEFT"/>set_velocity(velocity)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.core.plan.behavior_agent.BehaviorAgent" [color="black", fontcolor="black", label=<{BehaviorAgent|break_distance : int<br ALIGN="LEFT"/>car_following_flag : bool<br ALIGN="LEFT"/>debug_helper<br ALIGN="LEFT"/>destination_push_flag : int<br ALIGN="LEFT"/>emergency_param<br ALIGN="LEFT"/>end_waypoint : NoneType<br ALIGN="LEFT"/>hazard_flag : bool<br ALIGN="LEFT"/>ignore_traffic_light<br ALIGN="LEFT"/>lane_change_allowed : bool<br ALIGN="LEFT"/>light_id_to_ignore : int<br ALIGN="LEFT"/>light_state : str<br ALIGN="LEFT"/>max_speed<br ALIGN="LEFT"/>objects : dict<br ALIGN="LEFT"/>obstacle_vehicles : list<br ALIGN="LEFT"/>overtake_allowed : bool<br ALIGN="LEFT"/>overtake_allowed_origin<br ALIGN="LEFT"/>overtake_counter : int<br ALIGN="LEFT"/>safety_time<br ALIGN="LEFT"/>speed_decrease<br ALIGN="LEFT"/>speed_lim_dist<br ALIGN="LEFT"/>start_waypoint : NoneType<br ALIGN="LEFT"/>stop_sign_wait_count : int<br ALIGN="LEFT"/>tailgate_speed<br ALIGN="LEFT"/>ttc : int<br ALIGN="LEFT"/>vehicle<br ALIGN="LEFT"/>white_list : list<br ALIGN="LEFT"/>|add_white_list(vm)<br ALIGN="LEFT"/>car_following_manager(vehicle, distance, target_speed)<br ALIGN="LEFT"/>check_lane_change_permission(lane_change_allowed, collision_detector_enabled, rk)<br ALIGN="LEFT"/>collision_manager(rx, ry, ryaw, waypoint, adjacent_check)<br ALIGN="LEFT"/>get_local_planner()<br ALIGN="LEFT"/>get_push_destination(ego_vehicle_wp, is_intersection)<br ALIGN="LEFT"/>is_close_to_destination()<br ALIGN="LEFT"/>is_intersection(objects, waypoint_buffer)<br ALIGN="LEFT"/>lane_change_management()<br ALIGN="LEFT"/>overtake_management(obstacle_vehicle)<br ALIGN="LEFT"/>reroute(spawn_points)<br ALIGN="LEFT"/>run_step(target_speed, collision_detector_enabled, lane_change_allowed)<br ALIGN="LEFT"/>set_destination(start_location, end_location, clean, end_reset, clean_history)<br ALIGN="LEFT"/>traffic_light_manager(waypoint)<br ALIGN="LEFT"/>update_information(ego_pos, ego_speed, objects)<br ALIGN="LEFT"/>white_list_match(obstacles)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.core.sensing.perception.obstacle_vehicle.BoundingBox" [color="black", fontcolor="black", label=<{BoundingBox|extent<br ALIGN="LEFT"/>location<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"eCloud.ecloud.core.sensing.perception.static_obstacle.BoundingBox" [color="black", fontcolor="black", label=<{BoundingBox|extent<br ALIGN="LEFT"/>location<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"eCloud.ecloud.co_simulation.sumo_integration.bridge_helper.BridgeHelper" [color="black", fontcolor="black", label=<{BridgeHelper|blueprint_library : list<br ALIGN="LEFT"/>data_json<br ALIGN="LEFT"/>dir_path<br ALIGN="LEFT"/>f<br ALIGN="LEFT"/>offset : tuple<br ALIGN="LEFT"/>|get_carla_blueprint(sumo_actor, sync_color)<br ALIGN="LEFT"/>get_carla_lights_state(current_carla_lights, sumo_lights)<br ALIGN="LEFT"/>get_carla_traffic_light_state(sumo_tl_state)<br ALIGN="LEFT"/>get_carla_transform(in_sumo_transform, extent)<br ALIGN="LEFT"/>get_sumo_lights_state(current_sumo_lights, carla_lights)<br ALIGN="LEFT"/>get_sumo_traffic_light_state(carla_tl_state)<br ALIGN="LEFT"/>get_sumo_transform(in_carla_transform, extent)<br ALIGN="LEFT"/>get_sumo_vtype(carla_actor)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.core.sensing.perception.perception_manager.CameraSensor" [color="black", fontcolor="black", label=<{CameraSensor|debug_helper<br ALIGN="LEFT"/>frame : int<br ALIGN="LEFT"/>image : NoneType<br ALIGN="LEFT"/>image_height : int<br ALIGN="LEFT"/>image_width : int<br ALIGN="LEFT"/>sensor<br ALIGN="LEFT"/>timstamp : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"eCloud.ecloud.core.application.edge.collab_sandbox.Car" [color="black", fontcolor="black", label=<{Car|changed_roads : bool<br ALIGN="LEFT"/>dt<br ALIGN="LEFT"/>intentions : str<br ALIGN="LEFT"/>lane<br ALIGN="LEFT"/>numlanes<br ALIGN="LEFT"/>pos_x<br ALIGN="LEFT"/>scrolled : bool<br ALIGN="LEFT"/>slice : NoneType<br ALIGN="LEFT"/>target_lane : NoneType<br ALIGN="LEFT"/>target_velocity<br ALIGN="LEFT"/>v<br ALIGN="LEFT"/>|car_change_state(map_length)<br ALIGN="LEFT"/>car_lane_shift(direction)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.co_simulation.sumo_integration.carla_simulation.CarlaSimulation" [color="black", fontcolor="black", label=<{CarlaSimulation|blueprint_library<br ALIGN="LEFT"/>client<br ALIGN="LEFT"/>destroyed_actors : set<br ALIGN="LEFT"/>spawned_actors : set<br ALIGN="LEFT"/>step_length<br ALIGN="LEFT"/>traffic_light_ids<br ALIGN="LEFT"/>world<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>destroy_actor(actor_id)<br ALIGN="LEFT"/>get_actor(actor_id)<br ALIGN="LEFT"/>get_actor_light_state(actor_id)<br ALIGN="LEFT"/>get_traffic_light_state(landmark_id)<br ALIGN="LEFT"/>spawn_actor(blueprint, transform)<br ALIGN="LEFT"/>switch_off_traffic_lights()<br ALIGN="LEFT"/>synchronize_traffic_light(landmark_id, state)<br ALIGN="LEFT"/>synchronize_vehicle(vehicle_id, transform, lights)<br ALIGN="LEFT"/>tick()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.core.common.cav_world.CavWorld" [color="black", fontcolor="black", label=<{CavWorld|ml_manager : NoneType<br ALIGN="LEFT"/>sumo2carla_ids : dict<br ALIGN="LEFT"/>vehicle_id_set : set<br ALIGN="LEFT"/>|get_edge_dict()<br ALIGN="LEFT"/>get_platoon_dict()<br ALIGN="LEFT"/>get_scenario_manager()<br ALIGN="LEFT"/>get_vehicle_managers()<br ALIGN="LEFT"/>locate_vehicle_manager(loc)<br ALIGN="LEFT"/>update_edge(edge_manager)<br ALIGN="LEFT"/>update_platooning(platooning_manger)<br ALIGN="LEFT"/>update_scenario_manager(scenario_manager)<br ALIGN="LEFT"/>update_sumo_vehicles(sumo2carla_ids)<br ALIGN="LEFT"/>update_vehicle_manager(vehicle_manager)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.client_debug_helper.ClientDebugHelper" [color="black", fontcolor="black", label=<{ClientDebugHelper|agent_step_time_list : list<br ALIGN="LEFT"/>agent_update_info_time_list : list<br ALIGN="LEFT"/>control_time_list : list<br ALIGN="LEFT"/>controller_step_time_list : list<br ALIGN="LEFT"/>controller_update_info_time_list : list<br ALIGN="LEFT"/>debug_data : dict<br ALIGN="LEFT"/>localization_time_list : list<br ALIGN="LEFT"/>perception_time_list : list<br ALIGN="LEFT"/>timestamps_list : list<br ALIGN="LEFT"/>update_info_time_list : list<br ALIGN="LEFT"/>vehicle_step_time_list : list<br ALIGN="LEFT"/>|deserialize_debug_info(proto_debug_helper)<br ALIGN="LEFT"/>get_debug_data()<br ALIGN="LEFT"/>serialize_debug_info(proto_debug_helper)<br ALIGN="LEFT"/>update_agent_step_time(time)<br ALIGN="LEFT"/>update_agent_update_info_time(time)<br ALIGN="LEFT"/>update_control_time(time)<br ALIGN="LEFT"/>update_controller_step_time(time)<br ALIGN="LEFT"/>update_controller_update_info_time(time)<br ALIGN="LEFT"/>update_localization_time(tick_time_step)<br ALIGN="LEFT"/>update_perception_time(tick_time_step)<br ALIGN="LEFT"/>update_timestamp(timestamps: ecloud.Timestamps)<br ALIGN="LEFT"/>update_update_info_time(time)<br ALIGN="LEFT"/>update_vehicle_step_time(time)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.scenario_testing.utils.cosim_api.CoScenarioManager" [color="black", fontcolor="black", label=<{CoScenarioManager|carla2sumo_ids : dict<br ALIGN="LEFT"/>destroyed_actors : set<br ALIGN="LEFT"/>spawned_actors : set<br ALIGN="LEFT"/>sumo<br ALIGN="LEFT"/>sumo2carla_ids : dict<br ALIGN="LEFT"/>traffic_light_ids<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>destroy_actor(actor_id)<br ALIGN="LEFT"/>get_traffic_light_state(landmark_id)<br ALIGN="LEFT"/>spawn_actor(blueprint, transform)<br ALIGN="LEFT"/>synchronize_vehicle(vehicle_id, transform)<br ALIGN="LEFT"/>tick()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.core.plan.collision_check.CollisionChecker" [color="black", fontcolor="black", label=<{CollisionChecker|time_ahead : float<br ALIGN="LEFT"/>|adjacent_lane_collision_check(ego_loc, target_wpt, overtake, carla_map, world)<br ALIGN="LEFT"/>collision_circle_check(path_x, path_y, path_yaw, obstacle_vehicle, speed, carla_map, adjacent_check)<br ALIGN="LEFT"/>is_in_range(ego_pos, target_vehicle, candidate_vehicle, carla_map)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.core.actuation.control_manager.ControlManager" [color="black", fontcolor="black", label=<{ControlManager|controller<br ALIGN="LEFT"/>|run_step(target_speed, waypoint)<br ALIGN="LEFT"/>update_info(ego_pos, ego_speed)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.core.actuation.pid_controller.Controller" [color="black", fontcolor="black", label=<{Controller|current_speed : float<br ALIGN="LEFT"/>current_transform : NoneType<br ALIGN="LEFT"/>dt<br ALIGN="LEFT"/>dynamic<br ALIGN="LEFT"/>max_brake<br ALIGN="LEFT"/>max_steering<br ALIGN="LEFT"/>max_throttle<br ALIGN="LEFT"/>past_steering : float<br ALIGN="LEFT"/>|<I>dynamic_pid</I>()<br ALIGN="LEFT"/>lat_run_step(target_location)<br ALIGN="LEFT"/>lon_run_step(target_speed)<br ALIGN="LEFT"/>run_step(target_speed, waypoint)<br ALIGN="LEFT"/>update_info(ego_pos, ego_spd)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.customize.core.sensing.localization.localization_manager.CustomizedLocalizationManager" [color="black", fontcolor="black", label=<{CustomizedLocalizationManager|kf<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"eCloud.ecloud.core.common.data_dumper.DataDumper" [color="black", fontcolor="black", label=<{DataDumper|count : int<br ALIGN="LEFT"/>lidar<br ALIGN="LEFT"/>rgb_camera<br ALIGN="LEFT"/>save_parent_folder<br ALIGN="LEFT"/>save_time<br ALIGN="LEFT"/>vehicle_id<br ALIGN="LEFT"/>|matrix2list(matrix)<br ALIGN="LEFT"/>run_step(perception_manager, localization_manager, behavior_agent)<br ALIGN="LEFT"/>save_lidar_points()<br ALIGN="LEFT"/>save_rgb_image()<br ALIGN="LEFT"/>save_yaml_file(perception_manager, localization_manager, behavior_agent)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.ecloud_server.ecloud_comms.EcloudClient" [color="black", fontcolor="black", label=<{EcloudClient|channel : Channel<br ALIGN="LEFT"/>stub : EcloudStub<br ALIGN="LEFT"/>|get_waypoints(request: ecloud.WaypointRequest): ecloud.WaypointBuffer<br ALIGN="LEFT"/>register_vehicle(update: ecloud.VehicleUpdate): ecloud.SimulationInfo<br ALIGN="LEFT"/>send_vehicle_update(update: ecloud.VehicleUpdate): ecloud.Empty<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.ecloud_server.ecloud_comms.EcloudComms" [color="black", fontcolor="black", label=<{EcloudComms|GRPC_OPTIONS : list<br ALIGN="LEFT"/>RETRY_OPTS : str<br ALIGN="LEFT"/>TIMEOUT_MS : int<br ALIGN="LEFT"/>TIMEOUT_S : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"eCloud.ecloud.core.common.ecloud_config.EcloudConfig" [color="black", fontcolor="black", label=<{EcloudConfig|CONTROL : str<br ALIGN="LEFT"/>DATE_FORMAT_STRING : str<br ALIGN="LEFT"/>DESTROY : str<br ALIGN="LEFT"/>DRIVE : str<br ALIGN="LEFT"/>EXPLICIT : str<br ALIGN="LEFT"/>FORMAT_STRING : str<br ALIGN="LEFT"/>LOGGING_FIELD_STYLES : dict<br ALIGN="LEFT"/>RANDOM : str<br ALIGN="LEFT"/>config_json<br ALIGN="LEFT"/>done_behavior_types : dict<br ALIGN="LEFT"/>ecloud_base : dict<br ALIGN="LEFT"/>ecloud_scenario : dict<br ALIGN="LEFT"/>fatal_errors : bool<br ALIGN="LEFT"/>location_types : dict<br ALIGN="LEFT"/>log_level : int<br ALIGN="LEFT"/>logger : NoneType<br ALIGN="LEFT"/>|get_done_behavior()<br ALIGN="LEFT"/>get_location_type()<br ALIGN="LEFT"/>get_log_level()<br ALIGN="LEFT"/>get_logger()<br ALIGN="LEFT"/>get_num_cars()<br ALIGN="LEFT"/>get_step_count()<br ALIGN="LEFT"/>init_logging()<br ALIGN="LEFT"/>set_fatal_errors(b)<br ALIGN="LEFT"/>set_log_level(log_level: int, debug)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.ecloud_server.ecloud_comms.EcloudPushServer" [color="black", fontcolor="black", label=<{EcloudPushServer|last_tick : int<br ALIGN="LEFT"/>port_no : int<br ALIGN="LEFT"/>q : Queue<br ALIGN="LEFT"/>|PushTick(request: ecloud.Tick, context: grpc.aio.ServicerContext): ecloud.Empty<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.ecloud_server.ecloud_comms.EcloudServerComms" [color="black", fontcolor="black", label=<{EcloudServerComms|client_node_count : int<br ALIGN="LEFT"/>debug_helper<br ALIGN="LEFT"/>is_edge<br ALIGN="LEFT"/>push_q<br ALIGN="LEFT"/>sm_start_tstamp<br ALIGN="LEFT"/>tick_id : int<br ALIGN="LEFT"/>vehicle_count<br ALIGN="LEFT"/>vehicle_managers<br ALIGN="LEFT"/>|get_node_count(): int<br ALIGN="LEFT"/>server_do_tick(stub_, update_): ecloud.Empty<br ALIGN="LEFT"/>server_end_scenario(stub_)<br ALIGN="LEFT"/>server_push_waypoints(stub_, wps_): ecloud.Empty<br ALIGN="LEFT"/>server_start_scenario(stub_, update_)<br ALIGN="LEFT"/>server_unpack_debug_data(stub_): None<br ALIGN="LEFT"/>server_unpack_vehicle_updates(stub_): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.core.application.edge.edge_behavior_agent.EdgeBehaviorAgent" [color="black", fontcolor="black", label=<{EdgeBehaviorAgent|break_distance<br ALIGN="LEFT"/>debug_helper<br ALIGN="LEFT"/>light_state : str<br ALIGN="LEFT"/>objects<br ALIGN="LEFT"/>obstacle_vehicles<br ALIGN="LEFT"/>v2x_manager<br ALIGN="LEFT"/>vehicle_manager<br ALIGN="LEFT"/>|run_step(target_speed, collision_detector_enabled, lane_change_allowed)<br ALIGN="LEFT"/>update_information(ego_pos, ego_speed, objects)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.core.application.edge.edge_debug_helper.EdgeDebugHelper" [color="black", fontcolor="black", label=<{EdgeDebugHelper|algorithm_time_list : list<br ALIGN="LEFT"/>dist_gap_list : list<br ALIGN="LEFT"/>time_gap_list : list<br ALIGN="LEFT"/>|update(ego_speed, ttc, time_gap, dist_gap, algorithm_time_step)<br ALIGN="LEFT"/>update_edge(algorithm_time_step)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.core.application.edge.edge_manager_dyn.EdgeManager" [color="black", fontcolor="black", label=<{EdgeManager|Traffic_Tracker : NoneType<br ALIGN="LEFT"/>cav_world<br ALIGN="LEFT"/>destination : NoneType<br ALIGN="LEFT"/>dt : float<br ALIGN="LEFT"/>edgeid : str<br ALIGN="LEFT"/>end_waypoint<br ALIGN="LEFT"/>grid_size : float<br ALIGN="LEFT"/>locations : list<br ALIGN="LEFT"/>numcars : int<br ALIGN="LEFT"/>numlanes : int<br ALIGN="LEFT"/>ov<br ALIGN="LEFT"/>oy<br ALIGN="LEFT"/>processor : NoneType<br ALIGN="LEFT"/>robot_radius : float<br ALIGN="LEFT"/>secondary_offset : int<br ALIGN="LEFT"/>spawn_v : list<br ALIGN="LEFT"/>spawn_x : list<br ALIGN="LEFT"/>spawn_y : list<br ALIGN="LEFT"/>start_waypoint<br ALIGN="LEFT"/>target_speed<br ALIGN="LEFT"/>target_velocities : ndarray, list<br ALIGN="LEFT"/>tv : NoneType<br ALIGN="LEFT"/>v : NoneType<br ALIGN="LEFT"/>vehicle_manager_list : list<br ALIGN="LEFT"/>velocities : list, ndarray<br ALIGN="LEFT"/>waypoints_dict : dict<br ALIGN="LEFT"/>x_states : NoneType<br ALIGN="LEFT"/>xcars : list, ndarray<br ALIGN="LEFT"/>y_states : NoneType<br ALIGN="LEFT"/>ycars : list, ndarray<br ALIGN="LEFT"/>|add_member(vehicle_manager, leader)<br ALIGN="LEFT"/>algorithm_step()<br ALIGN="LEFT"/>destroy()<br ALIGN="LEFT"/>evaluate()<br ALIGN="LEFT"/>get_four_lane_waypoints_dict()<br ALIGN="LEFT"/>get_route_waypoints(destination)<br ALIGN="LEFT"/>run_step()<br ALIGN="LEFT"/>set_destination(destination)<br ALIGN="LEFT"/>start_edge()<br ALIGN="LEFT"/>update_information()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.core.application.edge.edge_manager.EdgeManager" [color="black", fontcolor="black", label=<{EdgeManager|Traffic_Tracker : NoneType<br ALIGN="LEFT"/>carla_client<br ALIGN="LEFT"/>cav_world<br ALIGN="LEFT"/>debug_helper<br ALIGN="LEFT"/>destination : NoneType<br ALIGN="LEFT"/>dist_gap<br ALIGN="LEFT"/>edgeid : str<br ALIGN="LEFT"/>end_waypoint<br ALIGN="LEFT"/>grid_size : float<br ALIGN="LEFT"/>locations : list<br ALIGN="LEFT"/>numcars<br ALIGN="LEFT"/>numlanes : int<br ALIGN="LEFT"/>ov<br ALIGN="LEFT"/>oy<br ALIGN="LEFT"/>processor : NoneType<br ALIGN="LEFT"/>robot_radius : float<br ALIGN="LEFT"/>search_dt : float<br ALIGN="LEFT"/>secondary_offset : int<br ALIGN="LEFT"/>spawn_v : list<br ALIGN="LEFT"/>spawn_x : list<br ALIGN="LEFT"/>spawn_y : list<br ALIGN="LEFT"/>start_waypoint<br ALIGN="LEFT"/>target_speed<br ALIGN="LEFT"/>target_velocities : list, ndarray<br ALIGN="LEFT"/>time_gap<br ALIGN="LEFT"/>traffic_velocity<br ALIGN="LEFT"/>tv : NoneType<br ALIGN="LEFT"/>v : NoneType<br ALIGN="LEFT"/>vehicle_manager_list : list<br ALIGN="LEFT"/>velocities : list, ndarray<br ALIGN="LEFT"/>waypoints_dict : dict<br ALIGN="LEFT"/>x_states : NoneType<br ALIGN="LEFT"/>xcars : list, ndarray<br ALIGN="LEFT"/>y_states : NoneType<br ALIGN="LEFT"/>ycars : ndarray, list<br ALIGN="LEFT"/>|add_member(vehicle_manager)<br ALIGN="LEFT"/>algorithm_step()<br ALIGN="LEFT"/>calculate_gap(distance)<br ALIGN="LEFT"/>destroy()<br ALIGN="LEFT"/>evaluate()<br ALIGN="LEFT"/>get_four_lane_waypoints_dict()<br ALIGN="LEFT"/>get_route_waypoints(destination)<br ALIGN="LEFT"/>run_step()<br ALIGN="LEFT"/>set_destination(destination)<br ALIGN="LEFT"/>start_edge()<br ALIGN="LEFT"/>update_information()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.core.application.edge.edge_plugin.EdgePlugin" [color="black", fontcolor="black", label=<{EdgePlugin|cda_enabled<br ALIGN="LEFT"/>edge_node : NoneType<br ALIGN="LEFT"/>ego_pos : NoneType<br ALIGN="LEFT"/>ego_spd : NoneType<br ALIGN="LEFT"/>platooning_blacklist : list<br ALIGN="LEFT"/>search_range<br ALIGN="LEFT"/>|update_info(ego_pos, ego_spd)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.globals.EnvironmentConfig" [color="black", fontcolor="black", label=<{EnvironmentConfig|CARLA_IP : str<br ALIGN="LEFT"/>CLIENTS : str<br ALIGN="LEFT"/>CLIENT_DNS : str<br ALIGN="LEFT"/>CLIENT_IP : str<br ALIGN="LEFT"/>CLIENT_MACHINE : str<br ALIGN="LEFT"/>ECLOUD_IP : str<br ALIGN="LEFT"/>MACHINE_NAME : str<br ALIGN="LEFT"/>config<br ALIGN="LEFT"/>environment : str<br ALIGN="LEFT"/>|get_carla_ip(): str<br ALIGN="LEFT"/>get_client_ip_by_name(client_name): str<br ALIGN="LEFT"/>get_ecloud_ip(): str<br ALIGN="LEFT"/>get_environment_params(): dict<br ALIGN="LEFT"/>set_environment(environment: str): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.scenario_testing.evaluations.evaluate_manager.EvaluationManager" [color="black", fontcolor="black", label=<{EvaluationManager|cav_world<br ALIGN="LEFT"/>debug_helper : NoneType<br ALIGN="LEFT"/>eval_save_path<br ALIGN="LEFT"/>scenario_manager : NoneType<br ALIGN="LEFT"/>|do_pickling(column_key, flat_list, file_path)<br ALIGN="LEFT"/>edge_eval(log_file)<br ALIGN="LEFT"/>evaluate()<br ALIGN="LEFT"/>evaluate_agent_data(cumulative_stats_folder_path)<br ALIGN="LEFT"/>evaluate_barrier_data(cumulative_stats_folder_path)<br ALIGN="LEFT"/>evaluate_client_data(client_data_key, cumulative_stats_folder_path)<br ALIGN="LEFT"/>evaluate_client_process_data(cumulative_stats_folder_path)<br ALIGN="LEFT"/>evaluate_individual_client_data(cumulative_stats_folder_path)<br ALIGN="LEFT"/>evaluate_network_data(cumulative_stats_folder_path)<br ALIGN="LEFT"/>evaluate_scenario(excludes_list)<br ALIGN="LEFT"/>kinematics_eval(log_file)<br ALIGN="LEFT"/>localization_eval(log_file)<br ALIGN="LEFT"/>platooning_eval(log_file)<br ALIGN="LEFT"/>simulation_eval(log_file)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.customize.core.sensing.localization.extented_kalman_filter.ExtentedKalmanFilter" [color="black", fontcolor="black", label=<{ExtentedKalmanFilter|PEst : ndarray<br ALIGN="LEFT"/>Q : ndarray<br ALIGN="LEFT"/>R : ndarray<br ALIGN="LEFT"/>time_step<br ALIGN="LEFT"/>xEst : ndarray<br ALIGN="LEFT"/>|jacob_f(x, u)<br ALIGN="LEFT"/>motion_model(x, u)<br ALIGN="LEFT"/>observation_model(x)<br ALIGN="LEFT"/>run_step(x, y, heading, velocity, yaw_rate_imu)<br ALIGN="LEFT"/>run_step_init(x, y, heading, velocity)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.core.application.edge.fsm.FSM" [color="black", fontcolor="black", label=<{FSM|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"eCloud.ecloud.core.application.platooning.fsm.FSM" [color="black", fontcolor="black", label=<{FSM|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"eCloud.ecloud.core.plan.global_route_planner.GlobalRoutePlanner" [color="black", fontcolor="black", label=<{GlobalRoutePlanner|<br ALIGN="LEFT"/>|abstract_route_plan(origin, destination)<br ALIGN="LEFT"/>setup()<br ALIGN="LEFT"/>trace_route(origin, destination)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.core.plan.global_route_planner_dao.GlobalRoutePlannerDAO" [color="black", fontcolor="black", label=<{GlobalRoutePlannerDAO|<br ALIGN="LEFT"/>|get_resolution()<br ALIGN="LEFT"/>get_topology()<br ALIGN="LEFT"/>get_waypoint(location)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.core.sensing.localization.localization_manager.GnssSensor" [color="black", fontcolor="black", label=<{GnssSensor|alt : float<br ALIGN="LEFT"/>lat : float<br ALIGN="LEFT"/>lon : float<br ALIGN="LEFT"/>sensor<br ALIGN="LEFT"/>timestamp : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"eCloud.ecloud.core.sensing.localization.localization_manager.ImuSensor" [color="black", fontcolor="black", label=<{ImuSensor|gyroscope : NoneType<br ALIGN="LEFT"/>sensor<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"eCloud.ecloud.core.sensing.localization.kalman_filter.KalmanFilter" [color="black", fontcolor="black", label=<{KalmanFilter|PEst : ndarray<br ALIGN="LEFT"/>Q : ndarray<br ALIGN="LEFT"/>R : ndarray<br ALIGN="LEFT"/>time_step<br ALIGN="LEFT"/>xEst : ndarray<br ALIGN="LEFT"/>|motion_model(x, u)<br ALIGN="LEFT"/>observation_model(x)<br ALIGN="LEFT"/>run_step(x, y, heading, velocity, yaw_rate_imu)<br ALIGN="LEFT"/>run_step_init(x, y, heading, velocity)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.core.sensing.perception.perception_manager.LidarSensor" [color="black", fontcolor="black", label=<{LidarSensor|data : NoneType<br ALIGN="LEFT"/>debug_helper<br ALIGN="LEFT"/>frame : int<br ALIGN="LEFT"/>o3d_pointcloud<br ALIGN="LEFT"/>sensor<br ALIGN="LEFT"/>timestamp : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"eCloud.ecloud.core.sensing.localization.localization_debug_helper.LocDebugHelper" [color="black", fontcolor="black", label=<{LocDebugHelper|actor_id<br ALIGN="LEFT"/>filter_spd : list<br ALIGN="LEFT"/>filter_x : list<br ALIGN="LEFT"/>filter_y : list<br ALIGN="LEFT"/>filter_yaw : list<br ALIGN="LEFT"/>gnss_spd : list<br ALIGN="LEFT"/>gnss_x : list<br ALIGN="LEFT"/>gnss_y : list<br ALIGN="LEFT"/>gnss_yaw : list<br ALIGN="LEFT"/>gt_spd : list<br ALIGN="LEFT"/>gt_x : list<br ALIGN="LEFT"/>gt_y : list<br ALIGN="LEFT"/>gt_yaw : list<br ALIGN="LEFT"/>hTrue : list, ndarray<br ALIGN="LEFT"/>hxEst : list, ndarray<br ALIGN="LEFT"/>hz : list, ndarray<br ALIGN="LEFT"/>show_animation<br ALIGN="LEFT"/>x_scale<br ALIGN="LEFT"/>y_scale<br ALIGN="LEFT"/>|deserialize_debug_info(proto_debug_helper)<br ALIGN="LEFT"/>evaluate()<br ALIGN="LEFT"/>run_step(gnss_x, gnss_y, gnss_yaw, gnss_spd, filter_x, filter_y, filter_yaw, filter_spd, gt_x, gt_y, gt_yaw, gt_spd)<br ALIGN="LEFT"/>serialize_debug_info(proto_debug_helper)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.core.plan.local_planner_behavior.LocalPlanner" [color="black", fontcolor="black", label=<{LocalPlanner|debug<br ALIGN="LEFT"/>debug_trajectory<br ALIGN="LEFT"/>dt<br ALIGN="LEFT"/>lane_id_change : bool<br ALIGN="LEFT"/>lane_lateral_change : bool<br ALIGN="LEFT"/>potential_curved_road : bool<br ALIGN="LEFT"/>target_waypoint<br ALIGN="LEFT"/>trajectory_update_freq<br ALIGN="LEFT"/>waypoint_update_freq<br ALIGN="LEFT"/>waypoints_queue : deque<br ALIGN="LEFT"/>|buffer_filter()<br ALIGN="LEFT"/>generate_path()<br ALIGN="LEFT"/>generate_trajectory(rx, ry, rk)<br ALIGN="LEFT"/>get_history_buffer()<br ALIGN="LEFT"/>get_trajectory()<br ALIGN="LEFT"/>get_waypoint_buffer()<br ALIGN="LEFT"/>get_waypoints_queue()<br ALIGN="LEFT"/>is_waypoint_valid(waypoint)<br ALIGN="LEFT"/>pop_buffer(vehicle_transform)<br ALIGN="LEFT"/>run_step(rx, ry, rk, target_speed, trajectory, following)<br ALIGN="LEFT"/>set_global_plan(current_plan, clean)<br ALIGN="LEFT"/>update_information(ego_pos, ego_speed)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.core.sensing.localization.localization_manager.LocalizationManager" [color="black", fontcolor="black", label=<{LocalizationManager|activate<br ALIGN="LEFT"/>debug_helper<br ALIGN="LEFT"/>dt<br ALIGN="LEFT"/>geo_ref<br ALIGN="LEFT"/>gnss<br ALIGN="LEFT"/>heading_noise_std<br ALIGN="LEFT"/>imu<br ALIGN="LEFT"/>kf<br ALIGN="LEFT"/>map<br ALIGN="LEFT"/>speed_noise_std<br ALIGN="LEFT"/>vehicle<br ALIGN="LEFT"/>|add_heading_direction_noise(heading_direction)<br ALIGN="LEFT"/>add_speed_noise(speed)<br ALIGN="LEFT"/>destroy()<br ALIGN="LEFT"/>get_ego_pos()<br ALIGN="LEFT"/>get_ego_spd()<br ALIGN="LEFT"/>localize()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.opencda_carla.Location" [color="black", fontcolor="black", label=<{Location|<br ALIGN="LEFT"/>|from_simulator_location(location)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.customize.ml_libs.ml_manager.MLManager" [color="black", fontcolor="black", label=<{MLManager|object_detector<br ALIGN="LEFT"/>|draw_2d_box(result, rgb_image, index)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.core.application.networking.NetworkModel" [color="black", fontcolor="black", label=<{NetworkModel|<br ALIGN="LEFT"/>|<I>get_latency_between_nodes</I>(node_1, node_2)<br ALIGN="LEFT"/><I>set_latency_factor</I>(latency_factor)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.core.application.edge.astar_test_groupcaps_transform.AStarPlanner.Node" [color="black", fontcolor="black", label=<{Node|cost : int<br ALIGN="LEFT"/>parent_index<br ALIGN="LEFT"/>v : ndarray<br ALIGN="LEFT"/>vt : ndarray<br ALIGN="LEFT"/>x_start : ndarray<br ALIGN="LEFT"/>x_tracked : NoneType, ndarray<br ALIGN="LEFT"/>y : ndarray<br ALIGN="LEFT"/>|length_of_path(node_set, pathlen)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.core.sensing.perception.obstacle_vehicle.ObstacleVehicle" [color="black", fontcolor="black", label=<{ObstacleVehicle|bounding_box<br ALIGN="LEFT"/>carla_id : int<br ALIGN="LEFT"/>location<br ALIGN="LEFT"/>o3d_bbx<br ALIGN="LEFT"/>transform : NoneType<br ALIGN="LEFT"/>velocity<br ALIGN="LEFT"/>|get_location()<br ALIGN="LEFT"/>get_transform()<br ALIGN="LEFT"/>get_velocity()<br ALIGN="LEFT"/>set_carla_id(id)<br ALIGN="LEFT"/>set_vehicle(vehicle, lidar, sumo2carla_ids)<br ALIGN="LEFT"/>set_velocity(velocity)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.core.sensing.perception.perception_manager.PerceptionManager" [color="black", fontcolor="black", label=<{PerceptionManager|activate<br ALIGN="LEFT"/>camera_num<br ALIGN="LEFT"/>camera_visualize<br ALIGN="LEFT"/>cav_world<br ALIGN="LEFT"/>count : int<br ALIGN="LEFT"/>data_dump : bool<br ALIGN="LEFT"/>debug_helper<br ALIGN="LEFT"/>ego_pos : NoneType<br ALIGN="LEFT"/>lidar : NoneType<br ALIGN="LEFT"/>lidar_visualize<br ALIGN="LEFT"/>ml_manager<br ALIGN="LEFT"/>o3d_vis : NoneType<br ALIGN="LEFT"/>objects : dict<br ALIGN="LEFT"/>rgb_camera : NoneType, list<br ALIGN="LEFT"/>semantic_lidar<br ALIGN="LEFT"/>vehicle<br ALIGN="LEFT"/>|activate_mode(objects)<br ALIGN="LEFT"/>deactivate_mode(objects)<br ALIGN="LEFT"/>destroy()<br ALIGN="LEFT"/>detect(ego_pos)<br ALIGN="LEFT"/>dist(a)<br ALIGN="LEFT"/>filter_vehicle_out_sensor(vehicle_list)<br ALIGN="LEFT"/>retrieve_traffic_lights(objects)<br ALIGN="LEFT"/>speed_retrieve(objects)<br ALIGN="LEFT"/>visualize_3d_bbx_front_camera(objects, rgb_image)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.core.plan.planer_debug_helper.PlanDebugHelper" [color="black", fontcolor="black", label=<{PlanDebugHelper|acc_list : list<br ALIGN="LEFT"/>actor_id<br ALIGN="LEFT"/>agent_step_list : list<br ALIGN="LEFT"/>count : int<br ALIGN="LEFT"/>speed_list : list<br ALIGN="LEFT"/>ttc_list : list<br ALIGN="LEFT"/>|deserialize_debug_info(proto_debug_helper)<br ALIGN="LEFT"/>evaluate()<br ALIGN="LEFT"/>get_agent_step_list()<br ALIGN="LEFT"/>serialize_debug_info(proto_debug_helper)<br ALIGN="LEFT"/>update(ego_speed, ttc)<br ALIGN="LEFT"/>update_agent_step_list(decision_index, time_s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.core.application.platooning.platoon_debug_helper.PlatoonDebugHelper" [color="black", fontcolor="black", label=<{PlatoonDebugHelper|dist_gap_list : list<br ALIGN="LEFT"/>time_gap_list : list<br ALIGN="LEFT"/>|update(ego_speed, ttc, time_gap, dist_gap)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.core.application.platooning.platoon_behavior_agent.PlatooningBehaviorAgent" [color="black", fontcolor="black", label=<{PlatooningBehaviorAgent|break_distance<br ALIGN="LEFT"/>current_gap<br ALIGN="LEFT"/>debug_helper<br ALIGN="LEFT"/>destination_changed : bool<br ALIGN="LEFT"/>dist_gap : float<br ALIGN="LEFT"/>inter_gap<br ALIGN="LEFT"/>lane_change_allowed : bool<br ALIGN="LEFT"/>light_state : str<br ALIGN="LEFT"/>objects<br ALIGN="LEFT"/>obstacle_vehicles<br ALIGN="LEFT"/>open_gap<br ALIGN="LEFT"/>overtake_allowed : bool<br ALIGN="LEFT"/>time_gap : float<br ALIGN="LEFT"/>v2x_manager<br ALIGN="LEFT"/>vehicle_manager<br ALIGN="LEFT"/>warm_up_speed<br ALIGN="LEFT"/>white_list<br ALIGN="LEFT"/>|calculate_gap(distance)<br ALIGN="LEFT"/>joining_finish_manager(insert_vehicle)<br ALIGN="LEFT"/>platooning_following_manager(inter_gap)<br ALIGN="LEFT"/>platooning_merge_management(frontal_vehicle_vm)<br ALIGN="LEFT"/>run_step(target_speed, collision_detector_enabled, lane_change_allowed)<br ALIGN="LEFT"/>run_step_back_joining()<br ALIGN="LEFT"/>run_step_cut_in_joining()<br ALIGN="LEFT"/>run_step_cut_in_move2point()<br ALIGN="LEFT"/>run_step_front_joining()<br ALIGN="LEFT"/>run_step_maintaining()<br ALIGN="LEFT"/>run_step_open_gap()<br ALIGN="LEFT"/>update_information(ego_pos, ego_speed, objects)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.core.application.platooning.platooning_manager.PlatooningManager" [color="black", fontcolor="black", label=<{PlatooningManager|cav_world<br ALIGN="LEFT"/>center_loc : NoneType<br ALIGN="LEFT"/>destination : NoneType<br ALIGN="LEFT"/>leader_target_speed : int<br ALIGN="LEFT"/>maximum_capacity<br ALIGN="LEFT"/>origin_leader_target_speed : int<br ALIGN="LEFT"/>pmid : str<br ALIGN="LEFT"/>recover_speed_counter : int<br ALIGN="LEFT"/>vehicle_manager_list : list<br ALIGN="LEFT"/>|add_member(vehicle_manager, leader)<br ALIGN="LEFT"/>cal_center_loc()<br ALIGN="LEFT"/>destroy()<br ALIGN="LEFT"/>evaluate()<br ALIGN="LEFT"/>reset_speed()<br ALIGN="LEFT"/>response_joining_request(request_loc)<br ALIGN="LEFT"/>run_step()<br ALIGN="LEFT"/>set_destination(destination)<br ALIGN="LEFT"/>set_lead(vehicle_manager)<br ALIGN="LEFT"/>set_member(vehicle_manager, index, lead)<br ALIGN="LEFT"/>update_information()<br ALIGN="LEFT"/>update_member_order()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.core.application.platooning.platooning_plugin.PlatooningPlugin" [color="black", fontcolor="black", label=<{PlatooningPlugin|cda_enabled<br ALIGN="LEFT"/>ego_pos : NoneType<br ALIGN="LEFT"/>ego_spd : NoneType<br ALIGN="LEFT"/>front_vehicle : NoneType<br ALIGN="LEFT"/>in_id : NoneType<br ALIGN="LEFT"/>leader : bool<br ALIGN="LEFT"/>platooning_blacklist : list<br ALIGN="LEFT"/>platooning_id : NoneType<br ALIGN="LEFT"/>platooning_object : NoneType<br ALIGN="LEFT"/>rear_vechile : NoneType<br ALIGN="LEFT"/>search_range<br ALIGN="LEFT"/>status : NoneType<br ALIGN="LEFT"/>|match_platoon(cav_nearby)<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>search_platoon(ego_loc, cav_nearby)<br ALIGN="LEFT"/>set_platoon(in_id, platooning_object, platooning_id, leader)<br ALIGN="LEFT"/>set_status(status)<br ALIGN="LEFT"/>update_info(ego_pos, ego_spd)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.core.plan.local_planner_behavior.RoadOption" [color="black", fontcolor="black", label=<{RoadOption|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"eCloud.ecloud.opencda_carla.Rotation" [color="black", fontcolor="black", label=<{Rotation|pitch : float<br ALIGN="LEFT"/>roll : float<br ALIGN="LEFT"/>yaw : float<br ALIGN="LEFT"/>|from_simulator_rotation(rotation)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.scenario_testing.utils.sim_api.ScenarioManager" [color="black", fontcolor="black", label=<{ScenarioManager|SPECTATOR_INDEX<br ALIGN="LEFT"/>application<br ALIGN="LEFT"/>application : list<br ALIGN="LEFT"/>apply_ml : bool<br ALIGN="LEFT"/>carla_map<br ALIGN="LEFT"/>carla_process : NoneType, Popen<br ALIGN="LEFT"/>carla_version<br ALIGN="LEFT"/>carla_version : str<br ALIGN="LEFT"/>cav_world : NoneType<br ALIGN="LEFT"/>client<br ALIGN="LEFT"/>client_node_count<br ALIGN="LEFT"/>client_node_count : int<br ALIGN="LEFT"/>comms_manager : NoneType<br ALIGN="LEFT"/>debug_helper<br ALIGN="LEFT"/>ecloud_config<br ALIGN="LEFT"/>ecloud_server : EcloudStub<br ALIGN="LEFT"/>ecloud_server : NoneType<br ALIGN="LEFT"/>ecloud_server_process : Popen, NoneType<br ALIGN="LEFT"/>is_edge : bool<br ALIGN="LEFT"/>is_edge : bool<br ALIGN="LEFT"/>origin_settings<br ALIGN="LEFT"/>perception : bool<br ALIGN="LEFT"/>push_q : NoneType, Queue<br ALIGN="LEFT"/>push_server : NoneType<br ALIGN="LEFT"/>run_distributed : bool<br ALIGN="LEFT"/>scenario : NoneType<br ALIGN="LEFT"/>scenario : str<br ALIGN="LEFT"/>scenario_params<br ALIGN="LEFT"/>sm_start_tstamp<br ALIGN="LEFT"/>tick_id<br ALIGN="LEFT"/>tick_id : int<br ALIGN="LEFT"/>vehicle_count<br ALIGN="LEFT"/>vehicle_count : int<br ALIGN="LEFT"/>vehicle_managers : dict<br ALIGN="LEFT"/>vehicle_state<br ALIGN="LEFT"/>vehicle_state<br ALIGN="LEFT"/>world<br ALIGN="LEFT"/>|broadcast_message(command): bool<br ALIGN="LEFT"/>broadcast_tick(): bool<br ALIGN="LEFT"/>close(spectator)<br ALIGN="LEFT"/>create_distributed_vehicle_manager(application, data_dump): list<br ALIGN="LEFT"/>create_edge_manager(application, data_dump, world_dt, edge_dt, search_dt)<br ALIGN="LEFT"/>create_platoon_manager(map_helper, data_dump)<br ALIGN="LEFT"/>create_traffic_carla()<br ALIGN="LEFT"/>create_vehicle_manager(application, map_helper, data_dump)<br ALIGN="LEFT"/>end(): None<br ALIGN="LEFT"/>push_waypoint_buffer(waypoint_buffer): bool<br ALIGN="LEFT"/>run_comms()<br ALIGN="LEFT"/>set_weather(weather_settings)<br ALIGN="LEFT"/>spawn_vehicle_by_range(tm, traffic_config, bg_list)<br ALIGN="LEFT"/>spawn_vehicles_by_list(tm, traffic_config, bg_list)<br ALIGN="LEFT"/>tick(): None<br ALIGN="LEFT"/>tick_world(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.core.sensing.perception.perception_manager.SemanticLidarSensor" [color="black", fontcolor="black", label=<{SemanticLidarSensor|debug_helper<br ALIGN="LEFT"/>frame : int<br ALIGN="LEFT"/>o3d_pointcloud<br ALIGN="LEFT"/>obj_idx : NoneType<br ALIGN="LEFT"/>obj_tag : NoneType<br ALIGN="LEFT"/>points : NoneType<br ALIGN="LEFT"/>sensor<br ALIGN="LEFT"/>timestamp : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"eCloud.ecloud.sim_debug_helper.SimDebugHelper" [color="black", fontcolor="black", label=<{SimDebugHelper|barrier_overhead_time_dict : dict<br ALIGN="LEFT"/>client_process_time_dict : dict<br ALIGN="LEFT"/>client_tick_time_dict : dict<br ALIGN="LEFT"/>client_tick_time_dict_per_client : dict<br ALIGN="LEFT"/>client_tick_time_list : list<br ALIGN="LEFT"/>network_time_dict : dict<br ALIGN="LEFT"/>network_time_dict_per_client : dict<br ALIGN="LEFT"/>shutdown_time_ms : int<br ALIGN="LEFT"/>sim_start_timestamp : NoneType<br ALIGN="LEFT"/>startup_time_ms : int<br ALIGN="LEFT"/>world_tick_time_list : list<br ALIGN="LEFT"/>|update_barrier_overhead_time_timestamp(vehicle_index, time_step)<br ALIGN="LEFT"/>update_client_process_time_timestamp(vehicle_index, time_step)<br ALIGN="LEFT"/>update_client_tick(tick_time_step)<br ALIGN="LEFT"/>update_network_time_per_client_timestamp(vehicle_index, time_step)<br ALIGN="LEFT"/>update_network_time_timestamp(tick_id: int, network_time_ms)<br ALIGN="LEFT"/>update_overall_step_time_per_client_timestamp(vehicle_index, time_step)<br ALIGN="LEFT"/>update_overall_step_time_timestamp(tick_id: int, overall_step_time_ms)<br ALIGN="LEFT"/>update_sim_start_timestamp(timestamp)<br ALIGN="LEFT"/>update_world_tick(tick_time_step)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.core.plan.spline.Spline" [color="black", fontcolor="black", label=<{Spline|a<br ALIGN="LEFT"/>b : list<br ALIGN="LEFT"/>c : list<br ALIGN="LEFT"/>d : list<br ALIGN="LEFT"/>nx<br ALIGN="LEFT"/>w : list<br ALIGN="LEFT"/>x<br ALIGN="LEFT"/>y<br ALIGN="LEFT"/>|calc(t)<br ALIGN="LEFT"/>calcd(t)<br ALIGN="LEFT"/>calcdd(t)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.core.plan.spline.Spline2D" [color="black", fontcolor="black", label=<{Spline2D|ds<br ALIGN="LEFT"/>s : list<br ALIGN="LEFT"/>sx<br ALIGN="LEFT"/>sy<br ALIGN="LEFT"/>|calc_curvature(s)<br ALIGN="LEFT"/>calc_position(s)<br ALIGN="LEFT"/>calc_yaw(s)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.core.sensing.perception.static_obstacle.StaticObstacle" [color="black", fontcolor="black", label=<{StaticObstacle|bounding_box<br ALIGN="LEFT"/>o3d_bbx<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"eCloud.ecloud.co_simulation.sumo_integration.sumo_simulation.SumoActorClass" [color="black", fontcolor="black", label=<{SumoActorClass|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"eCloud.ecloud.co_simulation.sumo_integration.sumo_simulation.SumoSignalState" [color="black", fontcolor="black", label=<{SumoSignalState|GREEN : str<br ALIGN="LEFT"/>GREEN_RIGHT_TURN : str<br ALIGN="LEFT"/>GREEN_WITHOUT_PRIORITY : str<br ALIGN="LEFT"/>OFF : str<br ALIGN="LEFT"/>OFF_BLINKING : str<br ALIGN="LEFT"/>RED : str<br ALIGN="LEFT"/>RED_YELLOW : str<br ALIGN="LEFT"/>YELLOW : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"eCloud.ecloud.co_simulation.sumo_integration.sumo_simulation.SumoSimulation" [color="black", fontcolor="black", label=<{SumoSimulation|destroyed_actors : set<br ALIGN="LEFT"/>net : NoneType<br ALIGN="LEFT"/>spawned_actors : set<br ALIGN="LEFT"/>traffic_light_ids<br ALIGN="LEFT"/>traffic_light_manager<br ALIGN="LEFT"/>|close()<br ALIGN="LEFT"/>destroy_actor(actor_id)<br ALIGN="LEFT"/>get_actor(actor_id)<br ALIGN="LEFT"/>get_net_offset()<br ALIGN="LEFT"/>get_traffic_light_state(landmark_id)<br ALIGN="LEFT"/>spawn_actor(type_id, color)<br ALIGN="LEFT"/>subscribe(actor_id)<br ALIGN="LEFT"/>switch_off_traffic_lights()<br ALIGN="LEFT"/>synchronize_traffic_light(landmark_id, state)<br ALIGN="LEFT"/>synchronize_vehicle(vehicle_id, transform, signals)<br ALIGN="LEFT"/>tick()<br ALIGN="LEFT"/>unsubscribe(actor_id)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.co_simulation.sumo_integration.sumo_simulation.SumoTLLogic" [color="black", fontcolor="black", label=<{SumoTLLogic|states<br ALIGN="LEFT"/>tlid<br ALIGN="LEFT"/>|get_all_landmarks()<br ALIGN="LEFT"/>get_all_signals()<br ALIGN="LEFT"/>get_associated_signals(landmark_id)<br ALIGN="LEFT"/>get_number_signals()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.co_simulation.sumo_integration.sumo_simulation.SumoTLManager" [color="black", fontcolor="black", label=<{SumoTLManager|<br ALIGN="LEFT"/>|get_all_associated_signals(landmark_id)<br ALIGN="LEFT"/>get_all_landmarks()<br ALIGN="LEFT"/>get_all_signals()<br ALIGN="LEFT"/>get_state(landmark_id)<br ALIGN="LEFT"/>set_state(landmark_id, state)<br ALIGN="LEFT"/>subscribe(tlid)<br ALIGN="LEFT"/>switch_off()<br ALIGN="LEFT"/>tick()<br ALIGN="LEFT"/>unsubscribe(tlid)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.co_simulation.sumo_integration.sumo_simulation.SumoVehSignal" [color="black", fontcolor="black", label=<{SumoVehSignal|BACKDRIVE : int<br ALIGN="LEFT"/>BLINKER_EMERGENCY : int<br ALIGN="LEFT"/>BLINKER_LEFT : int<br ALIGN="LEFT"/>BLINKER_RIGHT : int<br ALIGN="LEFT"/>BRAKELIGHT : int<br ALIGN="LEFT"/>DOOR_OPEN_LEFT : int<br ALIGN="LEFT"/>DOOR_OPEN_RIGHT : int<br ALIGN="LEFT"/>EMERGENCY_BLUE : int<br ALIGN="LEFT"/>EMERGENCY_RED : int<br ALIGN="LEFT"/>EMERGENCY_YELLOW : int<br ALIGN="LEFT"/>FOGLIGHT : int<br ALIGN="LEFT"/>FRONTLIGHT : int<br ALIGN="LEFT"/>HIGHBEAM : int<br ALIGN="LEFT"/>WIPER : int<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"eCloud.ecloud.core.application.edge.collab_sandbox.Traffic" [color="black", fontcolor="black", label=<{Traffic|cars_on_road : list<br ALIGN="LEFT"/>dt<br ALIGN="LEFT"/>lane_vehicles : ndarray<br ALIGN="LEFT"/>map_length<br ALIGN="LEFT"/>numcars<br ALIGN="LEFT"/>numlanes<br ALIGN="LEFT"/>time : int<br ALIGN="LEFT"/>|check_adjacent_occupancies(car)<br ALIGN="LEFT"/>check_ahead(car, margin_ahead)<br ALIGN="LEFT"/>check_collisions()<br ALIGN="LEFT"/>check_spawn_constraints()<br ALIGN="LEFT"/>printstates()<br ALIGN="LEFT"/>respawn_vehicles(xcars, ycars, vel)<br ALIGN="LEFT"/>ret_car_locations()<br ALIGN="LEFT"/>time_tick(mode)<br ALIGN="LEFT"/>update_grid_occupancies()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.core.sensing.perception.static_obstacle.TrafficLight" [color="black", fontcolor="black", label=<{TrafficLight|state<br ALIGN="LEFT"/>|get_location()<br ALIGN="LEFT"/>get_state()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.opencda_carla.Transform" [color="black", fontcolor="black", label=<{Transform|location : Optional[Location]<br ALIGN="LEFT"/>rotation<br ALIGN="LEFT"/>|from_simulator_transform(transform)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.core.common.v2x_manager.V2XManager" [color="black", fontcolor="black", label=<{V2XManager|cav_nearby : dict<br ALIGN="LEFT"/>cav_world<br ALIGN="LEFT"/>cda_enabled<br ALIGN="LEFT"/>communication_range<br ALIGN="LEFT"/>ego_pos : deque<br ALIGN="LEFT"/>ego_spd : deque<br ALIGN="LEFT"/>lag : int<br ALIGN="LEFT"/>loc_noise : float<br ALIGN="LEFT"/>platooning_plugin<br ALIGN="LEFT"/>speed_noise : float<br ALIGN="LEFT"/>vid<br ALIGN="LEFT"/>yaw_noise : float<br ALIGN="LEFT"/>|add_platoon_blacklist(pmid)<br ALIGN="LEFT"/>get_ego_pos()<br ALIGN="LEFT"/>get_ego_speed()<br ALIGN="LEFT"/>get_platoon_front_rear()<br ALIGN="LEFT"/>get_platoon_manager()<br ALIGN="LEFT"/>get_platoon_status()<br ALIGN="LEFT"/>in_platoon()<br ALIGN="LEFT"/>match_platoon()<br ALIGN="LEFT"/>search()<br ALIGN="LEFT"/>set_platoon(in_id, platooning_object, platooning_id, leader)<br ALIGN="LEFT"/>set_platoon_front(vm)<br ALIGN="LEFT"/>set_platoon_rear(vm)<br ALIGN="LEFT"/>set_platoon_status(status)<br ALIGN="LEFT"/>update_info(ego_pos, ego_spd)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.opencda_carla.Vector3D" [color="black", fontcolor="black", label=<{Vector3D|x : float<br ALIGN="LEFT"/>y : float<br ALIGN="LEFT"/>z : float<br ALIGN="LEFT"/>|from_simulator_vector(vector)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.core.common.vehicle_manager.VehicleManager" [color="black", fontcolor="black", label=<{VehicleManager|agent : NoneType<br ALIGN="LEFT"/>carla_ip : str<br ALIGN="LEFT"/>carla_map : NoneType<br ALIGN="LEFT"/>carla_version : str<br ALIGN="LEFT"/>client<br ALIGN="LEFT"/>controller<br ALIGN="LEFT"/>data_dumper : NoneType<br ALIGN="LEFT"/>debug_helper<br ALIGN="LEFT"/>destination : dict<br ALIGN="LEFT"/>destination_location<br ALIGN="LEFT"/>localizer<br ALIGN="LEFT"/>location_type<br ALIGN="LEFT"/>perception_manager<br ALIGN="LEFT"/>run_distributed : bool<br ALIGN="LEFT"/>scenario_params : NoneType<br ALIGN="LEFT"/>spawn_location<br ALIGN="LEFT"/>spawn_transform<br ALIGN="LEFT"/>v2x_manager<br ALIGN="LEFT"/>vehicle<br ALIGN="LEFT"/>vehicle_index : NoneType<br ALIGN="LEFT"/>vid : str<br ALIGN="LEFT"/>world : NoneType<br ALIGN="LEFT"/>|apply_control(control)<br ALIGN="LEFT"/>destroy()<br ALIGN="LEFT"/>initialize_process()<br ALIGN="LEFT"/>is_close_to_scenario_destination()<br ALIGN="LEFT"/>run_step(target_speed)<br ALIGN="LEFT"/>set_destination(start_location, end_location, clean, end_reset)<br ALIGN="LEFT"/>update_info()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.core.common.vehicle_manager_proxy.VehicleManagerProxy" [color="black", fontcolor="black", label=<{VehicleManagerProxy|agent : NoneType<br ALIGN="LEFT"/>application<br ALIGN="LEFT"/>carla_map<br ALIGN="LEFT"/>cav_config<br ALIGN="LEFT"/>cav_world<br ALIGN="LEFT"/>controller : NoneType<br ALIGN="LEFT"/>current_time : str<br ALIGN="LEFT"/>data_dumper : NoneType<br ALIGN="LEFT"/>data_dumping : bool<br ALIGN="LEFT"/>debug_helper<br ALIGN="LEFT"/>is_edge : bool<br ALIGN="LEFT"/>localizer : NoneType<br ALIGN="LEFT"/>perception_manager : NoneType<br ALIGN="LEFT"/>v2x_manager : NoneType<br ALIGN="LEFT"/>vehicle : NoneType<br ALIGN="LEFT"/>vehicle_index<br ALIGN="LEFT"/>vid<br ALIGN="LEFT"/>|start_vehicle()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.scenario_testing.utils.customized_map_api.bcolors" [color="black", fontcolor="black", label=<{bcolors|BOLD : str<br ALIGN="LEFT"/>ENDC : str<br ALIGN="LEFT"/>FAIL : str<br ALIGN="LEFT"/>HEADER : str<br ALIGN="LEFT"/>OKBLUE : str<br ALIGN="LEFT"/>OKCYAN : str<br ALIGN="LEFT"/>OKGREEN : str<br ALIGN="LEFT"/>UNDERLINE : str<br ALIGN="LEFT"/>WARNING : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"eCloud.ecloud.core.common.ecloud_config.eDoneBehavior" [color="black", fontcolor="black", label=<{eDoneBehavior|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"eCloud.ecloud.core.common.ecloud_config.eLocationType" [color="black", fontcolor="black", label=<{eLocationType|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"eCloud.ecloud.core.application.edge.transform_utils.transform_processor" [color="black", fontcolor="black", label=<{transform_processor|inverse_rotation_mat : ndarray<br ALIGN="LEFT"/>lanewidth : int<br ALIGN="LEFT"/>offset<br ALIGN="LEFT"/>rotation_mat : ndarray<br ALIGN="LEFT"/>scaling : list<br ALIGN="LEFT"/>waypoints<br ALIGN="LEFT"/>|process_back(processed_forward_array)<br ALIGN="LEFT"/>process_forward(indice)<br ALIGN="LEFT"/>process_single_waypoint_forward(waypoint_x, waypoint_y)<br ALIGN="LEFT"/>process_waypoints_bidirectional(indice)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"eCloud.ecloud.opencda_carla.Location" -> "eCloud.ecloud.opencda_carla.Vector3D" [arrowhead="empty", arrowtail="none"];
"eCloud.ecloud.co_simulation.sumo_integration.sumo_simulation.SumoTLManager" -> "eCloud.ecloud.co_simulation.sumo_integration.sumo_simulation.SumoSimulation" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="traffic_light_manager", style="solid"];
"eCloud.ecloud.core.common.vehicle_manager_proxy.ActorProxy" -> "eCloud.ecloud.core.common.vehicle_manager_proxy.VehicleManagerProxy" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="vehicle", style="solid"];
"eCloud.ecloud.core.plan.spline.Spline" -> "eCloud.ecloud.core.plan.spline.Spline2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sx", style="solid"];
"eCloud.ecloud.core.plan.spline.Spline" -> "eCloud.ecloud.core.plan.spline.Spline2D" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="sy", style="solid"];
"eCloud.ecloud.core.sensing.localization.localization_manager.GnssSensor" -> "eCloud.ecloud.core.sensing.localization.localization_manager.LocalizationManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="gnss", style="solid"];
"eCloud.ecloud.core.sensing.localization.localization_manager.ImuSensor" -> "eCloud.ecloud.core.sensing.localization.localization_manager.LocalizationManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="imu", style="solid"];
"eCloud.ecloud.core.sensing.perception.obstacle_vehicle.BoundingBox" -> "eCloud.ecloud.core.sensing.perception.obstacle_vehicle.ObstacleVehicle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="bounding_box", style="solid"];
"eCloud.ecloud.core.sensing.perception.perception_manager.LidarSensor" -> "eCloud.ecloud.core.sensing.perception.perception_manager.PerceptionManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="lidar", style="solid"];
"eCloud.ecloud.core.sensing.perception.perception_manager.SemanticLidarSensor" -> "eCloud.ecloud.core.sensing.perception.perception_manager.PerceptionManager" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="semantic_lidar", style="solid"];
"eCloud.ecloud.core.sensing.perception.static_obstacle.BoundingBox" -> "eCloud.ecloud.core.sensing.perception.static_obstacle.StaticObstacle" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="bounding_box", style="solid"];
"eCloud.ecloud.opencda_carla.Rotation" -> "eCloud.ecloud.opencda_carla.Transform" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="rotation", style="solid"];
}
