syntax = "proto3";

package grpc;

message Empty {}

message Ping {
  int32 vehicle_index = 1;
}

enum State {
  UNDEFINED = 0;
  NEW = 1;
  START = 2;
  UPDATE = 3;
  DESTINATION = 4;
  ACTIVE = 6;
  ENDED = 7;
}

enum Command {
  TICK = 0;
  END = 1;
  SET_DESTINATION = 2;
  UPDATE_INFO = 3;
}

enum VehicleState {
  REGISTERING = 0;
  CARLA_UPDATE = 1;
  UPDATE_INFO_OK = 2;
  GET_DESTINATION = 3;
  TICK_OK = 4; // regular OK / ack
  TICK_DONE = 5; // simulation ended
  OK = 6;
  ERROR = 7;
}

message SimulationState {
  State state = 1;
  int32 tick_id = 2;
  int32 vehicle_index = 3;
  string test_scenario = 4;
  string application = 5;
  string version = 6;
  Command command = 7;
  string params_json = 8;
  int32 message_hash = 9; // use as a UID for message indentification when Server needs an ack
  int32 message_id = 10;
}

message VehicleUpdate {
  int32 tick_id = 1;
  int32 vehicle_index = 2;
  string vid = 3;
  int32 actor_id = 4;
  VehicleState vehicle_state = 5;
  int32 message_hash = 6; // use as a UID for message indentification when Server needs an ack
  int32 message_id = 7;
}

service OpenCDA {
  rpc SimulationStateStream (Ping) returns (stream SimulationState);
  rpc SendUpdate (VehicleUpdate) returns (Empty);
  rpc RegisterVehicle (VehicleUpdate) returns (SimulationState);
  rpc UpdateInfo (VehicleUpdate) returns (Empty);
  rpc GetDestination (VehicleUpdate) returns (SimulationState);
}